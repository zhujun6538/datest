# Generated by Django 3.1.7 on 2021-02-24 04:10

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Api',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('method', models.CharField(choices=[('GET', 'GET'), ('POST', 'POST')], max_length=10)),
                ('description', models.TextField(max_length=1000)),
                ('isValid', models.BooleanField(default=True)),
                ('url', models.CharField(max_length=100)),
            ],
            options={
                'verbose_name_plural': '接口名称',
            },
        ),
        migrations.CreateModel(
            name='Assertkey',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Assertval',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.TextField(max_length=100000)),
            ],
        ),
        migrations.CreateModel(
            name='BASEURL',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='环境')),
                ('url', models.CharField(max_length=100, verbose_name='url')),
            ],
            options={
                'verbose_name_plural': '测试环境',
            },
        ),
        migrations.CreateModel(
            name='FUNC',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('args', models.CharField(max_length=100)),
            ],
            options={
                'verbose_name_plural': '调用方法',
            },
        ),
        migrations.CreateModel(
            name='Group',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
            ],
            options={
                'verbose_name_plural': '接口组',
            },
        ),
        migrations.CreateModel(
            name='Header',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('key', models.CharField(max_length=100)),
                ('value', models.TextField(max_length=1000)),
            ],
            options={
                'verbose_name_plural': '请求头',
            },
        ),
        migrations.CreateModel(
            name='Reqquestkey',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Reqquestval',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('value', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Testcase',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('casename', models.CharField(max_length=100)),
                ('isrun', models.CharField(choices=[('Y', '是'), ('N', '否')], default='Y', max_length=10, verbose_name='是否运行')),
                ('datamode', models.CharField(choices=[('JSON', 'JSON'), ('FORM-DATA', 'FORM-DATA')], max_length=10)),
                ('requestdata', models.TextField(blank=True, max_length=1000, null=True)),
                ('responsedata', models.TextField(blank=True, max_length=10000, null=True)),
                ('createtime', models.DateTimeField(auto_now_add=True, null=True)),
                ('runtime', models.DateTimeField(blank=True, null=True)),
                ('api', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='apitest.api')),
                ('baseurl', models.ForeignKey(default=1, null=True, on_delete=django.db.models.deletion.SET_NULL, to='apitest.baseurl')),
                ('creater', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('group', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='apitest.group')),
                ('stfunc', models.ManyToManyField(blank=True, related_name='testcase_stfunc', to='apitest.FUNC')),
                ('tdfunc', models.ManyToManyField(blank=True, related_name='testcase_tdfunc', to='apitest.FUNC')),
            ],
            options={
                'verbose_name_plural': '测试用例',
            },
        ),
        migrations.CreateModel(
            name='TESTSUITE',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('ctime', models.DateTimeField(auto_now_add=True)),
                ('failgoon', models.CharField(choices=[('Y', '是'), ('N', '否')], default='Y', max_length=10, verbose_name='失败继续')),
                ('failrerun', models.CharField(choices=[('Y', '是'), ('N', '否')], default='Y', max_length=10, verbose_name='失败重跑')),
                ('failreruntime', models.IntegerField()),
                ('baseurl', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='apitest.baseurl')),
                ('case', models.ManyToManyField(related_name='case_suites', to='apitest.Testcase')),
                ('creater', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': '测试集合',
            },
        ),
        migrations.CreateModel(
            name='TESTREPORT',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reportname', models.CharField(max_length=100)),
                ('testtime', models.DateTimeField(auto_now_add=True)),
                ('testnum', models.IntegerField()),
                ('result', models.CharField(choices=[('Y', '成功'), ('N', '失败')], max_length=10, verbose_name='运行结果')),
                ('suc', models.IntegerField(blank=True, null=True)),
                ('fail', models.IntegerField(blank=True, null=True)),
                ('failcase', models.ManyToManyField(blank=True, related_name='case_failcase', to='apitest.Testcase')),
                ('runner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('succase', models.ManyToManyField(blank=True, related_name='case_succase', to='apitest.Testcase')),
                ('testcases', models.ManyToManyField(related_name='case_report', to='apitest.Testcase')),
                ('testsuite', models.ManyToManyField(related_name='suite_report', to='apitest.TESTSUITE')),
            ],
            options={
                'verbose_name_plural': '测试报告',
            },
        ),
        migrations.CreateModel(
            name='RequestParam',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.CharField(blank=True, max_length=1000, null=True)),
                ('paramkey', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='apitest.reqquestkey')),
                ('paramval', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='apitest.reqquestval')),
                ('testcase', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='apitest.testcase')),
            ],
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('banben', models.CharField(max_length=100)),
                ('sonpj', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='apitest.project')),
            ],
            options={
                'verbose_name_plural': '测试项目',
            },
        ),
        migrations.CreateModel(
            name='AssertParam',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.CharField(blank=True, max_length=1000, null=True)),
                ('mode', models.CharField(choices=[('eq', 'equils'), ('in', 'contains'), ('jeq', 'jsonequils'), ('jct', 'jsoncontains'), ('jre', 'jsonmatch')], default='eq', max_length=10, verbose_name='模式')),
                ('paramkey', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='apitest.assertkey')),
                ('paramval', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='apitest.assertval')),
                ('testcase', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='apitest.testcase')),
            ],
        ),
        migrations.AddField(
            model_name='api',
            name='group',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='apitest.group'),
        ),
        migrations.AddField(
            model_name='api',
            name='header',
            field=models.ManyToManyField(related_name='header_apis', to='apitest.Header'),
        ),
        migrations.AddField(
            model_name='api',
            name='project',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='apitest.project'),
        ),
    ]
