"""
Built-in validate comparators.
"""

import re
from typing import Text, Any, Union
import json
import allure
import datetime
import unittest
from jsonschema import validate




def equal(check_value: Any, expect_value: Any, message: Text = ""):
    @allure.step('校验参数')
    def assertpar(check_value,expect_value):
        allure.attach(check_value, 'check_value.txt', allure.attachment_type.TEXT)
        allure.attach(expect_value, 'expect_value.txt', allure.attachment_type.TEXT)
    assertpar(check_value,expect_value)
    assert check_value == expect_value, message

key_list = []
def get_dict_allkeys(dict_a):
    """
    遍历嵌套字典，获取json返回结果的所有key值
    :param dict_a:
    :return: key_list
    """


def jsonequils(check_value: Any, expect_value: Any, message: Text = ""):
    check_value = check_value.replace('\'','"')
    check_value1 = check_value.replace(" ","").replace('false','False')
    expect_value1 = expect_value.replace(" ", "").replace('false', 'False')
    expect_value1 = re.sub(r'[\r\t\n]', '', expect_value1)
    @allure.step('jsonequils校验参数')
    def assertpar(check_value,expect_value):
        allure.attach(check_value, 'check_value.txt', allure.attachment_type.TEXT)
        allure.attach(expect_value, 'expect_value.txt', allure.attachment_type.TEXT)
    assertpar(check_value1,expect_value1)
    assert check_value1 == expect_value1, message


def jsoncontains(check_value: Any, expect_value: Any, message: Text = ""):
    check_value = check_value.replace('\'', '"')
    check_value1 = check_value.replace(" ", "").replace('false', 'False').replace('null', 'None').replace('true', 'True')
    expect_value1 = expect_value.replace(" ", "").replace('false', 'False').replace('null', 'None').replace('true', 'True')
    expect_value1 = re.sub(r'[\r\t\n]', '', expect_value1)
    @allure.step('jsoncontains校验参数')
    def assertpar(check_value,expect_value):
        allure.attach(check_value, 'check_value.txt', allure.attachment_type.TEXT)
        allure.attach(expect_value, 'expect_value.txt', allure.attachment_type.TEXT)
    assertpar(check_value1, expect_value1)
    contains(check_value1,expect_value1)

def jsonmatch(check_value: Any, expect_value: Any, message: Text = ""):
    check_value = check_value.replace('\'', '"')
    check_value1 = check_value.replace(" ", "").replace('false', 'False').replace('null', 'None').replace('true','True')
    expect_value1 = expect_value.replace(" ", "").replace('false', 'False').replace('null', 'None').replace('true','True')
    expect_value1 = re.sub(r'[\r\t\n]', '', expect_value1)
    @allure.step('jsonmatch校验参数')
    def assertpar(check_value, expect_value):
        allure.attach(check_value, 'check_value.txt', allure.attachment_type.TEXT)
        allure.attach(expect_value, 'expect_value.txt', allure.attachment_type.TEXT)
    assertpar(check_value1, expect_value1)
    unittest.TestCase().assertRegex(check_value1,expect_value1)

def jsonschema(check_value: Any, expect_value: Any, message: Text = ""):
    if expect_value.find('*schema') == 0:
        check_value = check_value.replace('\'', '"')
        check_value1 = check_value.replace(" ", "").replace('false', 'False').replace('null', 'None').replace('true','True')
        check_value1 = json.loads(check_value,encoding='utf-8')
        expect_value = expect_value.replace('*schema','$schema')
        expect_value = json.loads(expect_value,encoding='utf-8')
        validate(check_value1,expect_value)


def greater_than(
    check_value: Union[int, float], expect_value: Union[int, float], message: Text = ""
):
    assert check_value > expect_value, message


def less_than(
    check_value: Union[int, float], expect_value: Union[int, float], message: Text = ""
):
    assert check_value < expect_value, message


def greater_or_equals(
    check_value: Union[int, float], expect_value: Union[int, float], message: Text = ""
):
    assert check_value >= expect_value, message


def less_or_equals(
    check_value: Union[int, float], expect_value: Union[int, float], message: Text = ""
):
    assert check_value <= expect_value, message


def not_equal(check_value: Any, expect_value: Any, message: Text = ""):
    assert check_value != expect_value, message


def string_equals(check_value: Text, expect_value: Any, message: Text = ""):
    assert str(check_value) == str(expect_value), message


def length_equal(check_value: Text, expect_value: int, message: Text = ""):
    assert isinstance(expect_value, int), "expect_value should be int type"
    assert len(check_value) == expect_value, message


def length_greater_than(
    check_value: Text, expect_value: Union[int, float], message: Text = ""
):
    assert isinstance(
        expect_value, (int, float)
    ), "expect_value should be int/float type"
    assert len(check_value) > expect_value, message



def length_greater_or_equals(
    check_value: Text, expect_value: Union[int, float], message: Text = ""
):
    assert isinstance(
        expect_value, (int, float)
    ), "expect_value should be int/float type"
    assert len(check_value) >= expect_value, message


def length_less_than(
    check_value: Text, expect_value: Union[int, float], message: Text = ""
):
    assert isinstance(
        expect_value, (int, float)
    ), "expect_value should be int/float type"
    assert len(check_value) < expect_value, message


def length_less_or_equals(
    check_value: Text, expect_value: Union[int, float], message: Text = ""
):
    assert isinstance(
        expect_value, (int, float)
    ), "expect_value should be int/float type"
    assert len(check_value) <= expect_value, message


def contains(check_value: Any, expect_value: Any, message: Text = ""):
    assert isinstance(
        check_value, (list, tuple, dict, str, bytes)
    ), "expect_value should be list/tuple/dict/str/bytes type"
    assert expect_value in check_value, message


def contained_by(check_value: Any, expect_value: Any, message: Text = ""):
    assert isinstance(
        check_value, (list, tuple, dict, str, bytes)
    ), "expect_value should be list/tuple/dict/str/bytes type"
    assert check_value in expect_value, message


def type_match(check_value: Any, expect_value: Any, message: Text = ""):
    def get_type(name):
        if isinstance(name, type):
            return name
        elif isinstance(name, str):
            try:
                return __builtins__[name]
            except KeyError:
                raise ValueError(name)
        else:
            raise ValueError(name)

    if expect_value in ["None", "NoneType", None]:
        assert check_value is None, message
    else:
        assert type(check_value) == get_type(expect_value), message


def regex_match(check_value: Text, expect_value: Any, message: Text = ""):
    assert isinstance(expect_value, str), "expect_value should be Text type"
    assert isinstance(check_value, str), "check_value should be Text type"
    assert re.match(expect_value, check_value), message


def startswith(check_value: Any, expect_value: Any, message: Text = ""):
    assert str(check_value).startswith(str(expect_value)), message


def endswith(check_value: Text, expect_value: Any, message: Text = ""):
    assert str(check_value).endswith(str(expect_value)), message
